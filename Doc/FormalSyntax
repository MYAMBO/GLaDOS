This documentation is a formal syntax of the language. It is written in BNF format.

<program> ::= <declaration-list>

<declaration-list> ::= <declaration> | <declaration-list> <declaration>

<declaration> ::= <function-declaration> | <function-definition> | <variable-declaration>

<variable-declaration> ::= "define" <type-specifier> <identifier> "=" <expression>

<function-declaration> ::= "func" <identifier> "<" <params> ">" "=>" <type-specifier>

<params> ::= <param> | <param> "," <params>

<param> ::= <type-specifier> <identifier>

<type-specifier> ::= "Int8" | "Int16" | "Int32" | "Int64" | "UInt8" | "UInt16" | "UInt32" | "UInt64" | "List" | "Bool" | "String" | "Float" | "Double"

<identifier> ::= <letter> { <letter> | <digit> | "_" } | <digit> { <letter> | <digit> | "_" }

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<function-definition> ::= "$" <identifier> <NEWLINE> <statement-list> <NEWLINE> "->" <expression>

<function-call> ::= <identifier> "(" <expression> { "," <expression> } ")"

<statement-list> ::= Îµ | <statement> <NEWLINE> | <statement-list> <NEWLINE>

<statement> ::= <identifier> <cmp-op> <identifier> "->" <expression> | "->" <expression>

<expression> ::= <expression-member> { <op> <expression-member> }

<op> ::= "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||" | "!"

<cmp-op> ::= "==" | "!=" | "<" | ">" | "<=" | ">="

<expression-member> ::= <identifier> | <number> | <string> | <list> | <bool> | <function-call> | "(" <expression> ")"

<number> ::= "-" <digit> { <digit> } | <digit> { <digit> }

<string> ::= "\"" <letter> { <letter> } "\""

<list> ::= "[" <expression> { "," <expression> } "]"

<bool> ::= "True" | "False"
