(define abs (lambda (n)
  (if (< n 0)
      (- 0 n)
      n)))

(define is-safe? (lambda (new-row board col-dist)
  (if (null? board)
      #t
      (if (eq? new-row (car board))
          #f
          (if (eq? (abs (- new-row (car board))) col-dist)
              #f
              (is-safe? new-row (cdr board) (+ col-dist 1))
          )
      )
  )
))

(define solve-row-loop (lambda (n col board row)
  (if (eq? row n)
      0
      (+ (if (is-safe? row board 1)
             (solve n (+ col 1) (cons row board))
             0)
         (solve-row-loop n col board (+ row 1)))
  )
))

(define solve (lambda (n col board)
  (if (eq? col n)
      1
      (solve-row-loop n col board 0)
  )
))

(define nqueens (lambda (n)
  (solve n 0 (list))
))

(nqueens 8)

